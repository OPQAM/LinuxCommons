#!/bin/bash


version=1.4
stopping="n"

echo "My calculator Version: $version"

varX=""
varY=""
operation=""

# Checking if 'bc' is present. If not ask user about it
program=bc
if ! command -v $program > /dev/null                             # (1)
then
	choice="no"
	echo "$program is required to run this calculator."
	echo "Would you like to install it?"
	read choice

	if [ "$choice" == "yes" ] || [ "$choice" == "y" ]; then
		sudo apt update -y && sudo apt install -y $program
	else
		echo "This version of the calculator cannot run without the basic calculator. Signing out."
		exit 0
	fi
fi

# The calculator
while [ "$stopping" != "y" ]        # (2)
do
	echo "Enter number 1:"
	read varX

	if ! [[ "$varX" =~ ^-?[0-9]+$ ]]; then                   # (3)
		echo "Number is not a valid integer."
		continue
	fi

	echo "Enter operation (+,-,*,/):"
	read -n 1 operation
	echo ""

	case "$operation" in                                     # (4)
		"+" | "-" | "*" | "/" ) ;;
		* )
			echo "That is not a valid operation"
			continue
			;;
		esac

	echo "Enter number 2:"
	read varY

	if ! [[ "$varY" =~ ^-?[0-9]+$ ]]; then
		echo "Number 2 is not a valid integer."
		continue
	fi

	if [ "$varY" = 0  ] && [ "$operator" = "/" ]; then       # (5)
		echo "Divide by Zero"
		continue
	fi

	result=$(echo "scale=2; $varX $operation $varY" | bc)    # (6)

	echo "Result: $result"

	echo "Do you wish to leave?"
	read -n 1 stopping
	echo ""
done


echo "Thank you. I hope you had fun!"


# NOTES:
#
# (0) Changed the program so that it doesn't require the user to press 'Enter'
# when picking the operator or when chosing to leave or keep using the program
#
# (1) I had to send the output of 'command' to /dev/null, or it would be
#     outputed onto the terminal
#
# (2) Our while loop. The calculator will run until the user wants it to stop
#
# (3) This is Bash's extended test command ('[ ]' is the simple test version)
#     It's used for conditional expressions
#     '=~' is used for pattern matching. Allows to check if a string matches
#     a RegEx
#     '^[0-9]+$' Starting with a number and adding one or more of the
#     receding. Ends at '$'.
#	  '-?' is an optional minus sign, to allow for negative values
#
# (4) Using case, to make sure that our operation is in the specified set
#
# (5) We can't have a division by zero. This is just a control
#
# (6) The operation had to include 'bc' here, in order to appropriately
#     deal with negatives. It also solves the 'division problem'. We now
#     divide, instead of just 'floor'.
#     'bc' = 'basic calculator'

